package com.sxt.io;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.imageio.ImageTypeSpecifier;

/*
 * 
 * 使用文件输入 输出流进行文件的copy操作
 * 
 * 理解操作步骤: 分段读取 文件字节输出流
 * 
 * 1、创建源
 * 2、选择流
 * 3、操作（写出内容）
 * 4、释放资源
 * 
 * */ 

public class Copy {

		public static void main(String[] args) {
			
				
		}
		
		public static void copy(String srcPath, String destPath) {
			//1 创建源
				File src = new File(srcPath); // 文件copy源头
				File dest = new File(destPath); // 文件输出源
				
				//2 选择流
				InputStream is = null; // 输入流
				OutputStream os = null; // 输出流
				
				try {
					
						// false: 写入不断覆盖  不加参数也为false
						// True： 写入不断append进取
						
						is = new FileInputStream(src); // 
						os = new FileOutputStream(dest);
						
						// 3、 操作 写出
						byte[] flush = new byte[1024]; // 缓冲容器 1k
						int len = -1; // 接收长度
						while ((len =is.read(flush)) != -1) { // 读取流
								
								// 字节数组 ---> 字符串解码
								String str = new String(flush,0,len);
								
								os.write(flush, 0, flush.length); // 写入流
						}
				} catch (FileNotFoundException e) {
						e.printStackTrace();
				} catch (IOException e) {
						e.printStackTrace();
				} finally {
						try {
								
								//4、 释放资源 分别关闭 先打开的后关闭
								if (os != null) {
										os.close();
								}
								
						} catch (IOException e) {
								e.printStackTrace();
						}
						
						try {
								
								//4、 释放资源 分别关闭 先打开的后关闭
								if (is != null) {
										is.close();
								}
								
						} catch (IOException e) {
								e.printStackTrace();
						}
				}
		}
		
		
}
