package cn.sxt.collection;

import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;

// 测试TreeSet使用

public class TestTreeSET {
		public static void main(String[] args) {
				Set<Integer> set = new TreeSet<>();
				
				set.add(300);
				set.add(200);
				set.add(600);
				
				// 按照元素递增的方式排序
				for (Integer m : set) {
						System.out.println(m);
				}
				
				Set<Emp2> set2 = new TreeSet<>();
				
				set2.add(new Emp2(100, "aa", 3000));
				set2.add(new Emp2(50, "bb", 2000));
				set2.add(new Emp2(200, "ee",8000));
				set2.add(new Emp2(150, "ee",8000));
				set2.add(new Emp2(300, "dd", 20000));
				set2.add(new Emp2(160, "dd", 8000));
				
				System.out.println(set2);
				
				for (Emp2 emp2 : set2) {
						System.out.println(emp2);
				}
		}
}

class Emp2 implements Comparable<Emp2> { // Comparable若 一个类实现了Comparable接口，就意味着“该类支持排序”。
		
		int id;
		String name;
		double salary;
		
	
		
		public Emp2(int id, String name, double salary) {
				super();
				this.id = id;
				this.name = name;
				this.salary = salary;
		}

		@Override
		public String toString() {
				return "id" + id  + " name" + name + " salary" + salary;
		}

		//  这个地方的this.salary o.salary 分别是指什么
		@Override
		public int compareTo(Emp2 o) { // 负数：小于0；等于  正数  大于
				if (this.salary > o.salary) {
						return 1;
				} else if (this.salary < o.salary) {
						return -1;
				} else {
						if (this.id > o.id) {
								return 1;
						} else if (this.id > o.id) {
								return -1;
						} else {
								return 0;
						}
				}
		}
		
		
}

